from classes import Player, Point, Board


class Game:
    def __init__(self, mode=1):
        self._mode = mode
        self._points12 = [Point((0, 0), [(0, 3), (1, 1), (3, 0)]),
                          Point((0, 3), [(1, 3), (0, 0), (0, 6)]),
                          Point((0, 6), [(0, 3), (1, 5), (3, 6)]),
                          Point((1, 1), [(0, 0), (1, 3), (3, 1), (2, 2)]),
                          Point((1, 3), [(0, 3), (1, 1), (1, 5), (2, 3)]),
                          Point((1, 5), [(0, 6), (1, 3), (3, 5), (2, 4)]),
                          Point((2, 2), [(2, 3), (1, 1), (3, 2)]),
                          Point((2, 3), [(2, 2), (1, 3), (2, 4)]),
                          Point((2, 4), [(2, 3), (3, 4), (1, 5)]),
                          Point((3, 0), [(0, 0), (6, 0), (3, 1)]),
                          Point((3, 1), [(3, 0), (1, 1), (5, 1), (3, 2)]),
                          Point((3, 2), [(2, 2), (3, 1), (4, 2)]),
                          Point((3, 4), [(2, 4), (3, 5), (4, 4)]),
                          Point((3, 5), [(3, 4), (3, 6), (1, 5), (5, 5)]),
                          Point((3, 6), [(3, 5), (0, 6), (6, 6)]),
                          Point((4, 2), [(3, 2), (5, 1), (4, 3)]),
                          Point((4, 3), [(4, 2), (5, 3), (4, 4)]),
                          Point((4, 4), [(4, 3), (3, 4), (5, 5)]),
                          Point((5, 1), [(4, 2), (3, 1), (6, 0), (5, 3)]),
                          Point((5, 3), [(5, 1), (4, 3), (5, 5), (6, 3)]),
                          Point((5, 5), [(5, 3), (4, 4), (3, 5), (6, 6)]),
                          Point((6, 0), [(3, 0), (6, 3), (5, 1)]),
                          Point((6, 3), [(6, 0), (5, 3), (6, 6)]),
                          Point((6, 6), [(6, 3), (5, 5), (3, 6)])
                          ]
        self._board7 = [["_", "_", "_", "_", "_", "_", "_"],
                        ["_", "_", "_", "_", "_", "_", "_"],
                        ["_", "_", "_", "_", "_", "_", "_"],
                        ["_", "_", "_", "_", "_", "_", "_"],
                        ["_", "_", "_", "_", "_", "_", "_"],
                        ["_", "_", "_", "_", "_", "_", "_"],
                        ["_", "_", "_", "_", "_", "_", "_"],
                        ]
        self._points9 = [Point((0, 0), [(0, 3), (3, 0)]),
                         Point((0, 3), [(1, 3), (0, 0), (0, 6)]),
                         Point((0, 6), [(0, 3), (3, 6)]),
                         Point((1, 1), [(1, 3), (3, 1)]),
                         Point((1, 3), [(0, 3), (1, 1), (1, 5), (2, 3)]),
                         Point((1, 5), [(1, 3), (3, 5)]),
                         Point((2, 2), [(2, 3), (3, 2)]),
                         Point((2, 3), [(2, 2), (1, 3), (2, 4)]),
                         Point((2, 4), [(2, 3), (3, 4)]),
                         Point((3, 0), [(0, 0), (6, 0), (3, 1)]),
                         Point((3, 1), [(3, 0), (1, 1), (5, 1), (3, 2)]),
                         Point((3, 2), [(2, 2), (3, 1), (4, 2)]),
                         Point((3, 4), [(2, 4), (3, 5), (4, 4)]),
                         Point((3, 5), [(3, 4), (3, 6), (1, 5), (5, 5)]),
                         Point((3, 6), [(3, 5), (0, 6), (6, 6)]),
                         Point((4, 2), [(3, 2), (4, 3)]),
                         Point((4, 3), [(4, 2), (5, 3), (4, 4)]),
                         Point((4, 4), [(4, 3), (3, 4)]),
                         Point((5, 1), [(3, 1), (5, 3)]),
                         Point((5, 3), [(5, 1), (4, 3), (5, 5), (6, 3)]),
                         Point((5, 5), [(5, 3), (3, 5)]),
                         Point((6, 0), [(3, 0), (6, 3)]),
                         Point((6, 3), [(6, 0), (5, 3), (6, 6)]),
                         Point((6, 6), [(6, 3), (3, 6)])
                         ]

    def check_if_phase_moving(player1, player2, game_mode):
        if len(player1.occupied()) == game_mode and len(player2.occupied()) == game_mode:
            return True
        else:
            return False

    def check_if_win(self):
        pass

    def check_if_phase_flying(player1, player2, game_mode):
        if len(player2.occupied()) == 3 or len(player1.occupied()) == 3:
            return True
        else:
            return False
